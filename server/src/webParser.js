import axios from 'axios';
import * as cheerio from 'cheerio';
import { promises as fs } from 'fs';
import path from 'path';

class WebParser {
  constructor() {
    this.config = null;
    this.lastParseResult = null;
    this.configPath = path.join(process.cwd(), 'ufc-parser-config.json');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    this.loadConfig().catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', error);
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
  async loadConfig() {
    try {
      const configData = await fs.readFile(this.configPath, 'utf8');
      this.config = JSON.parse(configData);
      console.log(`üì• –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${this.config.name}`);
    } catch (error) {
      console.log('üìù –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª
  async saveConfig() {
    if (!this.config) return;
    
    try {
      await fs.writeFile(this.configPath, JSON.stringify(this.config, null, 2));
      console.log(`üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${this.config.name}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', error);
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞
  async setConfig(config) {
    this.config = config;
    console.log(`üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: ${config.name}`);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    await this.saveConfig();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  getConfig() {
    return this.config;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
  async parsePage(url = null) {
    const targetUrl = url || this.config?.url;
    
    if (!targetUrl) {
      throw new Error('URL –Ω–µ –∑–∞–¥–∞–Ω');
    }

    try {
      console.log(`üåê –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${targetUrl}`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const response = await axios.get(targetUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
          'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
          'Accept-Encoding': 'gzip, deflate, br',
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache',
          'Connection': 'keep-alive',
          'Upgrade-Insecure-Requests': '1',
          'Sec-Fetch-Dest': 'document',
          'Sec-Fetch-Mode': 'navigate',
          'Sec-Fetch-Site': 'none',
          'Sec-Fetch-User': '?1',
        },
        timeout: 30000,
      });

      const $ = cheerio.load(response.data);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const selectors = this.config?.selectors || {};
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–æ–µ–≤, –ø–∞—Ä—Å–∏–º –≤—Å–µ –±–æ–∏
      if (selectors.fightContainer) {
        return this.parseAllFights($, selectors, targetUrl);
      }
      
      // –ò–Ω–∞—á–µ –ø–∞—Ä—Å–∏–º –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–π
      const result = {
        fighter1_name: this.extractText($, selectors.fighter1Name),
        fighter2_name: this.extractText($, selectors.fighter2Name),
        fighter1_image: this.extractAttribute($, selectors.fighter1Image, 'src'),
        fighter2_image: this.extractAttribute($, selectors.fighter2Image, 'src'),
        event_name: this.extractText($, selectors.eventName),
        event_time: this.extractText($, selectors.eventTime),
        description: this.extractText($, selectors.description),
        is_live: this.checkIsLive($('body'), selectors.liveIndicator),
        parsedAt: new Date().toISOString(),
        sourceUrl: targetUrl
      };

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (!result.fighter1_name || !result.fighter2_name) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º–µ–Ω–∞ –±–æ–π—Ü–æ–≤');
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      result.fighter1_image = this.normalizeImageUrl(result.fighter1_image, targetUrl);
      result.fighter2_image = this.normalizeImageUrl(result.fighter2_image, targetUrl);

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –±–æ—è
      result.id = this.generateFightId(result.fighter1_name, result.fighter2_name);

      this.lastParseResult = result;
      console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: ${result.fighter1_name} vs ${result.fighter2_name}`);
      
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
      throw error;
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –±–æ–µ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  parseAllFights($, selectors, targetUrl) {
    const fightElements = $(selectors.fightContainer);
    const fights = [];
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${fightElements.length} –±–æ–µ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞`);
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã .c-listing-fight –≤ —Å–ø–∏—Å–æ–∫
    const fightElementList = [];
    fightElements.each((index, element) => {
      const $element = $(element);
      fightElementList.push($element);
      console.log(`üìã –≠–ª–µ–º–µ–Ω—Ç #${index + 1}: ${$element.attr('class') || 'no-class'}`);
    });
    
    console.log(`üìã –°–æ–±—Ä–∞–Ω–æ ${fightElementList.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–µ–≤`);
    
    // –¢–µ–ø–µ—Ä—å –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    fightElementList.forEach(($fight, index) => {
      try {
        const fighter1Name = this.extractTextFromElement($fight, selectors.fighter1Name);
        const fighter2Name = this.extractTextFromElement($fight, selectors.fighter2Name);
        
        console.log(`üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –±–æ–π #${index + 1}: ${fighter1Name} vs ${fighter2Name}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±–æ—è
        const outcomeElement = $fight.find('.c-listing-fight__outcome--win');
        const hasOutcome = outcomeElement.length > 0;
        
        console.log(`üîç –ë–æ–π #${index + 1}: ${fighter1Name} vs ${fighter2Name} - outcome —ç–ª–µ–º–µ–Ω—Ç: ${hasOutcome ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
        
        const fight = {
          fighter1_name: fighter1Name,
          fighter2_name: fighter2Name,
          fighter1_image: this.extractAttributeFromElement($fight, selectors.fighter1Image, 'src'),
          fighter2_image: this.extractAttributeFromElement($fight, selectors.fighter2Image, 'src'),
          event_name: this.extractText($, selectors.eventName),
          event_time: this.extractText($, selectors.eventTime),
          description: this.extractTextFromElement($fight, selectors.description),
          is_live: this.checkIsLive($fight, selectors.liveIndicator),
          has_outcome: hasOutcome,
          parsedAt: new Date().toISOString(),
          sourceUrl: targetUrl
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º–µ–Ω–∞ –±–æ–π—Ü–æ–≤
        if (fight.fighter1_name && fight.fighter2_name) {
          // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          fight.fighter1_image = this.normalizeImageUrl(fight.fighter1_image, targetUrl);
          fight.fighter2_image = this.normalizeImageUrl(fight.fighter2_image, targetUrl);
          
          // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –±–æ—è
          fight.id = this.generateFightId(fight.fighter1_name, fight.fighter2_name);
          
          fights.push(fight);
          console.log(`‚úÖ –ë–æ–π #${index + 1}: ${fight.fighter1_name} vs ${fight.fighter2_name} (–∂–∏–≤–æ–π: ${fight.is_live ? '–î–ê' : '–ù–ï–¢'})`);
        } else {
          console.log(`‚ùå –ë–æ–π #${index + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º–µ–Ω–∞ (${fighter1Name} vs ${fighter2Name})`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–æ—è #${index + 1}: ${error.message}`);
      }
    });
    
    console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ ${fights.length} –±–æ–µ–≤ –∏–∑ ${fightElementList.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º live —Å—Ç–∞—Ç—É—Å –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const allLiveBanners = $('.c-listing-fight__banner--live');
    const visibleLiveBanners = $('.c-listing-fight__banner--live:not(.hidden)');
    const hasGlobalLive = visibleLiveBanners.length > 0;
    
    console.log(`üîç –í—Å–µ live banner'—ã: ${allLiveBanners.length}`);
    console.log(`üîç –í–∏–¥–∏–º—ã–µ live banner'—ã: ${visibleLiveBanners.length}`);
    console.log(`üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–π live banner: ${hasGlobalLive ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
    
    if (allLiveBanners.length > 0) {
      console.log(`üîç –ü–µ—Ä–≤—ã–π live banner:`, allLiveBanners.first().toString());
    }
    
    if (hasGlobalLive) {
      console.log(`üîç –í–∏–¥–∏–º—ã–π live banner:`, visibleLiveBanners.first().toString());
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ live –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    const otherLiveIndicators = $('[class*="live"], [class*="Live"], [class*="LIVE"]');
    console.log(`üîç –î—Ä—É–≥–∏–µ live –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: ${otherLiveIndicators.length}`);
    if (otherLiveIndicators.length > 0) {
      otherLiveIndicators.each((i, el) => {
        const $el = $(el);
        console.log(`üîç Live –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä ${i+1}:`, $el.toString());
      });
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –±–æ–π (–∂–∏–≤–æ–π –∏–ª–∏ –Ω–µ—Ç)
    if (fights.length > 0) {
      const selectedFight = fights[0];
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π live banner, –ø–æ–º–µ—á–∞–µ–º –±–æ–π –∫–∞–∫ live
      if (hasGlobalLive) {
        selectedFight.is_live = true;
        console.log(`üìÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–π: ${selectedFight.fighter1_name} vs ${selectedFight.fighter2_name} (–∂–∏–≤–æ–π: –î–ê - –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)`);
      } else {
        console.log(`üìÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–π: ${selectedFight.fighter1_name} vs ${selectedFight.fighter2_name} (–∂–∏–≤–æ–π: –ù–ï–¢)`);
      }
      
      this.lastParseResult = selectedFight;
      return selectedFight;
    }
    
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–æ—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
  extractText($, selector) {
    if (!selector) return null;
    
    try {
      const element = $(selector).first();
      const text = element.text().trim();
      // –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
      return text ? text.replace(/\s+/g, ' ').trim() : null;
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ "${selector}": ${error.message}`);
      return null;
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
  extractAttribute($, selector, attribute) {
    if (!selector) return null;
    
    try {
      const element = $(selector).first();
      return element.attr(attribute) || null;
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ "${selector}": ${error.message}`);
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ –±–æ–π –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ
  checkIsLive($element, selector) {
    if (!selector) return false;
    
    try {
      // –ò—â–µ–º live banner –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –±–æ—è
      const liveBanner = $element.find(selector);
      
      console.log(`üîç Live banner –ø–æ–∏—Å–∫: —Å–µ–ª–µ–∫—Ç–æ—Ä="${selector}", –Ω–∞–π–¥–µ–Ω–æ=${liveBanner.length}`);
      
      if (liveBanner.length > 0) {
        const hasHidden = liveBanner.hasClass('hidden');
        const textContent = liveBanner.text().trim();
        const allClasses = liveBanner.attr('class') || '';
        
        console.log(`üîç Live banner –Ω–∞–π–¥–µ–Ω:`);
        console.log(`   - –ö–ª–∞—Å—Å—ã: "${allClasses}"`);
        console.log(`   - Hidden: ${hasHidden}`);
        console.log(`   - –¢–µ–∫—Å—Ç: "${textContent}"`);
        
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ù–ï —Å–∫—Ä—ã—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç live —Ç–µ–∫—Å—Ç
        if (!hasHidden && (textContent.toLowerCase().includes('live') || textContent.toLowerCase().includes('–ø—Ä—è–º–æ–π —ç—Ñ–∏—Ä'))) {
          console.log(`   - –†–µ–∑—É–ª—å—Ç–∞—Ç: LIVE (–≤–∏–¥–∏–º—ã–π banner —Å live —Ç–µ–∫—Å—Ç–æ–º)`);
          return true;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∏–¥–∏–º—ã–π banner –≤ —ç–ª–µ–º–µ–Ω—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ live –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
      // –ù—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∞ –Ω–µ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–æ—è
      let globalLiveIndicators = $element.find('.c-listing-ticker-fightcard__live');
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –±–æ—è, –∏—â–µ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (globalLiveIndicators.length === 0) {
        const $body = $element.closest('body');
        if ($body.length > 0) {
          globalLiveIndicators = $body.find('.c-listing-ticker-fightcard__live');
        }
      }
      
      console.log(`üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ live –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: –Ω–∞–π–¥–µ–Ω–æ=${globalLiveIndicators.length}`);
      
      if (globalLiveIndicators.length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        const firstIndicator = globalLiveIndicators.first();
        const indicatorText = firstIndicator.text().trim();
        const indicatorClasses = firstIndicator.attr('class') || '';
        
        console.log(`üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–π live –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:`);
        console.log(`   - –ö–ª–∞—Å—Å—ã: "${indicatorClasses}"`);
        console.log(`   - –¢–µ–∫—Å—Ç: "${indicatorText}"`);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π live –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å—Ç—å live –±–æ–π
        if (indicatorText.toLowerCase().includes('live')) {
          console.log(`   - –†–µ–∑—É–ª—å—Ç–∞—Ç: LIVE (–Ω–∞–π–¥–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π live –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)`);
          return true;
        }
      }
      
      console.log(`üîç Live —Å—Ç–∞—Ç—É—Å: –ù–ï live`);
      return false;
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ live —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
      return false;
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  extractTextFromElement($element, selector) {
    if (!selector) return null;
    
    try {
      const element = $element.find(selector).first();
      const text = element.text().trim();
      // –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
      return text ? text.replace(/\s+/g, ' ').trim() : null;
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ "${selector}": ${error.message}`);
      return null;
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  extractAttributeFromElement($element, selector, attribute) {
    if (!selector) return null;
    
    try {
      const element = $element.find(selector).first();
      return element.attr(attribute) || null;
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ "${selector}": ${error.message}`);
      return null;
    }
  }



  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  normalizeImageUrl(imageUrl, baseUrl) {
    if (!imageUrl) return null;
    
    try {
      // –ï—Å–ª–∏ URL —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (imageUrl.startsWith('http')) {
        return imageUrl;
      }
      
      // –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
      const base = new URL(baseUrl);
      return new URL(imageUrl, base.origin).href;
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ URL: ${error.message}`);
      return imageUrl;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è –±–æ—è
  generateFightId(fighter1, fighter2) {
    // –£–±–∏—Ä–∞–µ–º timestamp, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –±–æ–π—Ü–æ–≤
    const names = [fighter1, fighter2].sort().join('-');
    const hash = Buffer.from(names).toString('base64').replace(/[^a-zA-Z0-9]/g, '');
    return `parsed-${hash.substring(0, 8)}`;
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  async testParser(testConfig) {
    const originalConfig = this.config;
    
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
      this.config = testConfig;
      
      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const result = await this.parsePage();
      
      return {
        success: true,
        data: result,
        message: '–ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        extractedFields: {
          fighter1_name: !!result.fighter1_name,
          fighter2_name: !!result.fighter2_name,
          fighter1_image: !!result.fighter1_image,
          fighter2_image: !!result.fighter2_image,
          event_name: !!result.event_name,
          event_time: !!result.event_time,
          description: !!result.description,
          is_live: !!result.is_live,
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞'
      };
    } finally {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      this.config = originalConfig;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞
  getStatus() {
    return {
      isConfigured: !!this.config,
      configName: this.config?.name || null,
      targetUrl: this.config?.url || null,
      isActive: this.config?.isActive || false,
      lastParseResult: this.lastParseResult,
      lastParseTime: this.lastParseResult?.parsedAt || null
    };
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  validateConfig(config) {
    const errors = [];
    
    if (!config.name) errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    if (!config.url) errors.push('URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    if (!config.selectors) errors.push('–°–µ–ª–µ–∫—Ç–æ—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    
    const selectors = config.selectors || {};
    if (!selectors.fighter1Name) errors.push('–°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∏–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ –±–æ–π—Ü–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    if (!selectors.fighter2Name) errors.push('–°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∏–º–µ–Ω–∏ –≤—Ç–æ—Ä–æ–≥–æ –±–æ–π—Ü–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    if (!selectors.eventName) errors.push('–°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const webParser = new WebParser();
export default webParser; 