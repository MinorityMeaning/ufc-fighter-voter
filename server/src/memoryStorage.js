// In-Memory Storage –¥–ª—è UFC –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±–µ–∑ –ë–î
import { v4 as uuidv4 } from 'uuid';

class MemoryStorage {
  constructor() {
    this.gameState = {
      currentFight: null,
      votes: {
        fighter1: 0,
        fighter2: 0,
        total: 0
      },
      userSessions: new Map(), // sessionId -> fighterChoice (1 or 2)
      fightHistory: [], // –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±–æ–∏
      isActive: false,
      lastUpdate: null
    };
    
    this.config = {
      maxHistorySize: 10,
      backupInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
      fightCheckInterval: 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    this.startBackupScheduler();
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  getCurrentState() {
    return {
      fight: this.gameState.currentFight,
      votes: { ...this.gameState.votes },
      isActive: this.gameState.isActive,
      lastUpdate: this.gameState.lastUpdate,
      totalUsers: this.gameState.userSessions.size
    };
  }

  // –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –±–æ–π
  startNewFight(fightData) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ–π –≤ –∏—Å—Ç–æ—Ä–∏—é
    if (this.gameState.currentFight) {
      this.addToHistory({
        ...this.gameState.currentFight,
        finalVotes: { ...this.gameState.votes },
        endTime: new Date().toISOString()
      });
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—è
    this.gameState.currentFight = {
      id: fightData.id || uuidv4(),
      fighter1_name: fightData.fighter1_name,
      fighter2_name: fightData.fighter2_name,
      fighter1_image: fightData.fighter1_image,
      fighter2_image: fightData.fighter2_image,
      event_name: fightData.event_name,
      startTime: new Date().toISOString(),
      status: 'active',
      is_active: true, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      is_live: fightData.is_live || false, // –î–æ–±–∞–≤–ª—è–µ–º LIVE —Å—Ç–∞—Ç—É—Å
      fighter1_votes: 0, // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤
      fighter2_votes: 0,
      total_votes: 0
    };

    this.gameState.votes = { fighter1: 0, fighter2: 0, total: 0 };
    this.gameState.userSessions.clear();
    this.gameState.isActive = true;
    this.gameState.lastUpdate = new Date().toISOString();

    console.log(`ü•ä –ù–æ–≤—ã–π –±–æ–π –Ω–∞—á–∞–ª—Å—è: ${fightData.fighter1_name} vs ${fightData.fighter2_name} (–∂–∏–≤–æ–π: ${fightData.is_live ? '–î–ê' : '–ù–ï–¢'})`);
    return this.gameState.currentFight;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å
  addVote(sessionId, fighterChoice, ipAddress = null) {
    if (!this.gameState.isActive || !this.gameState.currentFight) {
      throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
    }

    if (![1, 2].includes(fighterChoice)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –±–æ–π—Ü–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (this.gameState.userSessions.has(sessionId)) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –≤ —ç—Ç–æ–º –±–æ—é');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
    this.gameState.userSessions.set(sessionId, fighterChoice);
    
    if (fighterChoice === 1) {
      this.gameState.votes.fighter1++;
      this.gameState.currentFight.fighter1_votes++;
    } else {
      this.gameState.votes.fighter2++;
      this.gameState.currentFight.fighter2_votes++;
    }
    this.gameState.votes.total++;
    this.gameState.currentFight.total_votes++;
    this.gameState.lastUpdate = new Date().toISOString();

    console.log(`üó≥Ô∏è –ù–æ–≤—ã–π –≥–æ–ª–æ—Å: fighter${fighterChoice}, –≤—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: ${this.gameState.votes.total}`);
    
    return {
      success: true,
      votes: { ...this.gameState.votes }
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  checkUserVoted(sessionId) {
    const fighterChoice = this.gameState.userSessions.get(sessionId);
    return {
      hasVoted: !!fighterChoice,
      fighterChoice: fighterChoice || null
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  getVoteStats() {
    const total = this.gameState.votes.total;
    return {
      fighter1_votes: this.gameState.votes.fighter1,
      fighter2_votes: this.gameState.votes.fighter2,
      total_votes: total,
      fighter1_percentage: total > 0 ? Math.round((this.gameState.votes.fighter1 / total) * 100) : 0,
      fighter2_percentage: total > 0 ? Math.round((this.gameState.votes.fighter2 / total) * 100) : 0,
      active_users: this.gameState.userSessions.size
    };
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–æ–π
  endCurrentFight() {
    if (this.gameState.currentFight) {
      this.gameState.isActive = false;
      this.gameState.currentFight.is_active = false; // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –æ–±—ä–µ–∫—Ç–µ –±–æ—è
      
      this.addToHistory({
        ...this.gameState.currentFight,
        finalVotes: { ...this.gameState.votes },
        endTime: new Date().toISOString()
      });
      
      console.log(`üèÅ –ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω: ${this.gameState.currentFight.fighter1_name} vs ${this.gameState.currentFight.fighter2_name}`);
      console.log(`üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞: ${this.gameState.votes.fighter1} vs ${this.gameState.votes.fighter2}`);
      
      return true;
    }
    return false;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –±–æ–π –≤ –∏—Å—Ç–æ—Ä–∏—é
  addToHistory(fightData) {
    this.gameState.fightHistory.unshift(fightData);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.gameState.fightHistory.length > this.config.maxHistorySize) {
      this.gameState.fightHistory = this.gameState.fightHistory.slice(0, this.config.maxHistorySize);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–æ–µ–≤
  getFightHistory(limit = 5) {
    return this.gameState.fightHistory.slice(0, limit);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
  getServerStats() {
    return {
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      activeConnections: this.gameState.userSessions.size,
      currentFight: !!this.gameState.currentFight,
      totalVotes: this.gameState.votes.total,
      fightHistoryCount: this.gameState.fightHistory.length
    };
  }

  // Backup —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  async backupToFile(filePath = './backup/gameState.json') {
    try {
      const fs = await import('fs/promises');
      const path = await import('path');
      
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const dir = path.dirname(filePath);
      await fs.mkdir(dir, { recursive: true });
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ currentFight —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
      const currentFight = this.gameState.currentFight ? {
        ...this.gameState.currentFight,
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        fighter1_name: this.gameState.currentFight.fighter1_name || '',
        fighter2_name: this.gameState.currentFight.fighter2_name || '',
        fighter1_image: this.gameState.currentFight.fighter1_image || '',
        fighter2_image: this.gameState.currentFight.fighter2_image || '',
        event_name: this.gameState.currentFight.event_name || '',
        is_active: this.gameState.currentFight.is_active !== undefined ? this.gameState.currentFight.is_active : this.gameState.isActive,
        fighter1_votes: this.gameState.currentFight.fighter1_votes || this.gameState.votes.fighter1,
        fighter2_votes: this.gameState.currentFight.fighter2_votes || this.gameState.votes.fighter2,
        total_votes: this.gameState.currentFight.total_votes || this.gameState.votes.total
      } : null;
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Map –≤ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è JSON
      const backupData = {
        currentFight: currentFight,
        votes: this.gameState.votes,
        userSessions: Object.fromEntries(this.gameState.userSessions),
        fightHistory: this.gameState.fightHistory,
        isActive: this.gameState.isActive,
        lastUpdate: this.gameState.lastUpdate,
        backupTime: new Date().toISOString()
      };
      
      await fs.writeFile(filePath, JSON.stringify(backupData, null, 2));
      console.log(`üíæ Backup —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è backup:', error);
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
  async restoreFromFile(filePath = './backup/gameState.json') {
    try {
      const fs = await import('fs/promises');
      const data = await fs.readFile(filePath, 'utf8');
      const backupData = JSON.parse(data);
      
      this.gameState.currentFight = backupData.currentFight;
      this.gameState.votes = backupData.votes || { fighter1: 0, fighter2: 0, total: 0 };
      this.gameState.userSessions = new Map(Object.entries(backupData.userSessions || {}));
      this.gameState.fightHistory = backupData.fightHistory || [];
      this.gameState.isActive = backupData.isActive || false;
      this.gameState.lastUpdate = backupData.lastUpdate;
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–µ–≤
      if (this.gameState.currentFight && !this.gameState.currentFight.fighter1_name) {
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å —Ç–µ–º –∂–µ ID
        const lastFight = this.gameState.fightHistory.find(fight => 
          fight.id === this.gameState.currentFight.id
        );
        
        if (lastFight) {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
          this.gameState.currentFight.fighter1_name = lastFight.fighter1_name;
          this.gameState.currentFight.fighter2_name = lastFight.fighter2_name;
          this.gameState.currentFight.fighter1_image = lastFight.fighter1_image;
          this.gameState.currentFight.fighter2_image = lastFight.fighter2_image;
          this.gameState.currentFight.event_name = lastFight.event_name;
          console.log(`üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±–æ—è: ${lastFight.fighter1_name} vs ${lastFight.fighter2_name}`);
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–æ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      if (this.gameState.currentFight && this.gameState.currentFight.is_active === undefined) {
        this.gameState.currentFight.is_active = this.gameState.isActive;
        this.gameState.currentFight.fighter1_votes = this.gameState.votes.fighter1;
        this.gameState.currentFight.fighter2_votes = this.gameState.votes.fighter2;
        this.gameState.currentFight.total_votes = this.gameState.votes.total;
      }
      
      console.log(`üì• –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ backup (${backupData.backupTime})`);
      console.log(`üó≥Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤: ${this.gameState.votes.total}`);
      return true;
    } catch (error) {
      console.log('‚ÑπÔ∏è Backup —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      return false;
    }
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  startBackupScheduler() {
    setInterval(() => {
      this.backupToFile();
    }, this.config.backupInterval);
  }

  // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ (cleanup)
  cleanupOldSessions(maxAge = 24 * 60 * 60 * 1000) { // 24 —á–∞—Å–∞
    // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–∞—é—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –±–æ–µ
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    console.log(`üßπ Cleanup: –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π ${this.gameState.userSessions.size}`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const memoryStorage = new MemoryStorage();
export default MemoryStorage; 