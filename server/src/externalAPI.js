// –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±–æ—è—Ö —Å –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
import { memoryStorage } from './memoryStorage.js';

// –ò–º–ø–æ—Ä—Ç –≤–µ–±-–ø–∞—Ä—Å–µ—Ä–∞
import webParser from './webParser.js';

class ExternalFightAPI {
  constructor() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 7 –¥–æ 9 –º–∏–Ω—É—Ç
    const randomMinutes = Math.floor(Math.random() * 3) + 7; // 7, 8, –∏–ª–∏ 9 –º–∏–Ω—É—Ç
    const randomSeconds = Math.floor(Math.random() * 60); // —Å–ª—É—á–∞–π–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–æ–ª—å—à–µ–π —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç–∏
    
    this.config = {
      checkInterval: (randomMinutes * 60 + randomSeconds) * 1000, // —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç 7 –¥–æ 9 –º–∏–Ω—É—Ç
      apiSources: [
        {
          name: 'UFC Official API',
          url: 'https://api.ufc.com/v1/events/current',
          parser: this.parseUFCAPI.bind(this)
        },
        {
          name: 'ESPN UFC',
          url: 'https://api.espn.com/v1/mma/ufc/events',
          parser: this.parseESPNAPI.bind(this)
        },
        {
          name: 'Web Parser (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π)',
          url: 'web-parser',
          parser: this.parseWebPage.bind(this)
        },
        {
          name: 'Mock API (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)',
          url: 'mock',
          parser: this.parseMockAPI.bind(this)
        }
      ],
      currentSource: 2 // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–ø–∞—Ä—Å–µ—Ä
    };
    
    this.lastCheck = null;
    this.isChecking = false;
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –±–æ–µ–≤
  startMonitoring() {
    const minutes = Math.floor(this.config.checkInterval / 60000);
    const seconds = Math.floor((this.config.checkInterval % 60000) / 1000);
    console.log(`üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ–µ–≤ –∫–∞–∂–¥—ã–µ ${minutes} –º–∏–Ω—É—Ç ${seconds} —Å–µ–∫—É–Ω–¥`);
    
    // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    this.checkForNewFights();
    
    // –ó–∞—Ç–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
    setInterval(() => {
      this.checkForNewFights();
    }, this.config.checkInterval);
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –±–æ–µ–≤
  async checkForNewFights() {
    if (this.isChecking) {
      console.log('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return { status: 'already_checking', message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' };
    }

    this.isChecking = true;
    this.lastCheck = new Date().toISOString();

    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –±–æ–∏...');
      
      const currentState = memoryStorage.getCurrentState();
      const newFightData = await this.fetchCurrentFight();
      
      if (!newFightData) {
        console.log('üò¥ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return { status: 'no_fights', message: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π –±–æ–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
      if (this.shouldStartNewFight(currentState.fight, newFightData)) {
        console.log(`üÜï –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –±–æ–π: ${newFightData.fighter1_name} vs ${newFightData.fighter2_name}`);
        
        const fight = memoryStorage.startNewFight(newFightData);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –±–æ–µ
        this.broadcastNewFight(fight);
        
        return { status: 'new_fight', message: `–ù–æ–≤—ã–π –±–æ–π: ${fight.fighter1_name} vs ${fight.fighter2_name}`, fight };
      } else {
        console.log('‚úÖ –¢–µ–∫—É—â–∏–π –±–æ–π –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω');
        return { status: 'current_active', message: '–¢–µ–∫—É—â–∏–π –±–æ–π –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω' };
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –±–æ–µ–≤:', error);
      return { status: 'error', message: error.message };
    } finally {
      this.isChecking = false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–æ–π —Å –≤–Ω–µ—à–Ω–µ–≥–æ API
  async fetchCurrentFight() {
    const source = this.config.apiSources[this.config.currentSource];
    
    try {
      console.log(`üì° –ó–∞–ø—Ä–æ—Å –∫ ${source.name}...`);
      return await source.parser(source.url);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç ${source.name}:`, error);
      return null;
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –±–æ–π
  shouldStartNewFight(currentFight, newFightData) {
    if (!currentFight) {
      return true; // –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –±–æ—è, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
    }

    if (!newFightData) {
      return false; // –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ ID –∏–ª–∏ –ø–æ –∏–º–µ–Ω–∞–º –±–æ–π—Ü–æ–≤
    if (newFightData.id && currentFight.id !== newFightData.id) {
      return true;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç ID, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∏–º–µ–Ω–∞–º
    const currentNames = `${currentFight.fighter1_name} vs ${currentFight.fighter2_name}`;
    const newNames = `${newFightData.fighter1_name} vs ${newFightData.fighter2_name}`;
    
    return currentNames !== newNames;
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –±–æ–µ
  broadcastNewFight(fight) {
    if (global.socketIO) {
      global.socketIO.emit('new_fight_started', {
        fight,
        votes: memoryStorage.getVoteStats(),
        message: `–ù–æ–≤—ã–π –±–æ–π –Ω–∞—á–∞–ª—Å—è: ${fight.fighter1_name} vs ${fight.fighter2_name}!`
      });
      console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º`);
    }
  }

  // === –ü–ê–†–°–ï–†–´ –î–õ–Ø –†–ê–ó–õ–ò–ß–ù–´–• API ===

  // –ü–∞—Ä—Å–µ—Ä –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ UFC API
  async parseUFCAPI(url) {
    // –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å HTTP –∑–∞–ø—Ä–æ—Å
    // const response = await fetch(url);
    // const data = await response.json();
    
    // –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
    throw new Error('UFC API –ø–∞—Ä—Å–µ—Ä –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á');
  }

  // –ü–∞—Ä—Å–µ—Ä –¥–ª—è ESPN API
  async parseESPNAPI(url) {
    // –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    // const response = await fetch(url);
    // const data = await response.json();
    
    throw new Error('ESPN API –ø–∞—Ä—Å–µ—Ä –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
  }

  // –ü–∞—Ä—Å–µ—Ä –¥–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç webParser)
  async parseWebPage(url) {
    try {
      const status = webParser.getStatus();
      
      if (!status.isConfigured) {
        throw new Error('–í–µ–±-–ø–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }

      if (!status.isActive) {
        throw new Error('–í–µ–±-–ø–∞—Ä—Å–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω');
      }

      console.log(`üåê –ü–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${status.targetUrl}`);
      
      const result = await webParser.parsePage();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      result.status = 'active';
      result.is_active = true;
      result.startTime = new Date().toISOString();
      result.fighter1_votes = 0;
      result.fighter2_votes = 0;
      result.total_votes = 0;
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      throw error;
    }
  }

  // Mock –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async parseMockAPI(url) {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –±–æ–µ–≤
    const mockFights = [
      {
        id: 'mock-fight-1',
        fighter1_name: '–ö–æ–Ω–æ—Ä –ú–∞–∫–ì—Ä–µ–≥–æ—Ä',
        fighter2_name: '–•–∞–±–∏–± –ù—É—Ä–º–∞–≥–æ–º–µ–¥–æ–≤',
        fighter1_image: 'https://dmxg5wxfqgb4u.cloudfront.net/styles/card_advance_small_280x356/s3/2024-10/101224-Conor-McGregor-GettyImages-1129769522.jpg?itok=ldON2KfI',
        fighter2_image: 'https://dmxg5wxfqgb4u.cloudfront.net/styles/card_advance_small_280x356/s3/2023-04/041523-Khabib-Nurmagomedov-GettyImages-1154585543.jpg?itok=1eSgYS1e',
        event_name: 'UFC 300: Revenge',
        event_date: new Date().toISOString()
      },
      {
        id: 'mock-fight-2',
        fighter1_name: '–î–∂–æ–Ω –î–∂–æ–Ω—Å',
        fighter2_name: '–°—Ç–∏–ø–µ –ú–∏–æ—á–∏—á',
        fighter1_image: 'https://dmxg5wxfqgb4u.cloudfront.net/styles/card_advance_small_280x356/s3/2023-04/041523-Jon-Jones-GettyImages-1434072036.jpg?itok=7y1r9jP2',
        fighter2_image: 'https://dmxg5wxfqgb4u.cloudfront.net/styles/card_advance_small_280x356/s3/2023-04/041523-Stipe-Miocic-GettyImages-1434072039.jpg?itok=3y1f2kJl',
        event_name: 'UFC 301: Heavyweight Supremacy',
        event_date: new Date().toISOString()
      },
      {
        id: 'mock-fight-3',
        fighter1_name: '–ò—Å—Ä–∞—ç–ª—å –ê–¥–µ—Å–∞–Ω—å—è',
        fighter2_name: '–ê–ª–µ–∫—Å –ü–µ—Ä–µ–π—Ä–∞',
        fighter1_image: 'https://dmxg5wxfqgb4u.cloudfront.net/styles/card_advance_small_280x356/s3/2024-10/101224-Israel-Adesanya-GettyImages-1666031673.jpg?itok=2fFg5h8K',
        fighter2_image: 'https://dmxg5wxfqgb4u.cloudfront.net/styles/card_advance_small_280x356/s3/2024-10/101224-Alex-Pereira-GettyImages-1468282648.jpg?itok=8fGh2kVx',
        event_name: 'UFC 302: Middleweight Mayhem',
        event_date: new Date().toISOString()
      }
    ];

    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–π (–¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –¥–µ–º–æ)

    const currentState = memoryStorage.getCurrentState();
    let availableFights = mockFights;

    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–æ–π –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if (currentState.fight) {
      availableFights = mockFights.filter(fight => 
        fight.id !== currentState.fight.id
      );
    }

    if (availableFights.length === 0) {
      return null;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–æ–π
    const randomIndex = Math.floor(Math.random() * availableFights.length);
    const selectedFight = availableFights[randomIndex];

    console.log(`üé≤ Mock API: –≤—ã–±—Ä–∞–Ω –±–æ–π ${selectedFight.fighter1_name} vs ${selectedFight.fighter2_name}`);
    return selectedFight;
  }

  // === –£–¢–ò–õ–ò–¢–´ ===

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
  switchSource(sourceIndex) {
    if (sourceIndex >= 0 && sourceIndex < this.config.apiSources.length) {
      this.config.currentSource = sourceIndex;
      const source = this.config.apiSources[sourceIndex];
      console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫: ${source.name}`);
      return true;
    }
    return false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  getAvailableSources() {
    return this.config.apiSources.map((source, index) => ({
      index,
      name: source.name,
      isActive: index === this.config.currentSource,
      url: source.url
    }));
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  getStatus() {
    const source = this.config.apiSources[this.config.currentSource];
    return {
      isActive: true,
      currentSource: source.name,
      lastCheck: this.lastCheck,
      nextCheck: this.lastCheck ? 
        new Date(new Date(this.lastCheck).getTime() + this.config.checkInterval).toISOString() : 
        '—Å–∫–æ—Ä–æ',
              checkInterval: Math.floor(this.config.checkInterval / 60000) + ' –º–∏–Ω—É—Ç ' + Math.floor((this.config.checkInterval % 60000) / 1000) + ' —Å–µ–∫—É–Ω–¥',
      isChecking: this.isChecking,
      isHealthy: true,
      totalChecks: this.lastCheck ? 1 : 0
    };
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏)
  async forceCheck() {
    console.log('üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –±–æ–µ–≤...');
    const result = await this.checkForNewFights();
    return result;
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  stopMonitoring() {
    console.log('‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç clearInterval
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const externalAPI = new ExternalFightAPI();
export default ExternalFightAPI; 