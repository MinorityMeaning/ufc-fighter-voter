// Routes –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º in-memory storage
import express from 'express';
import { memoryStorage } from '../memoryStorage.js';
import { v4 as uuidv4 } from 'uuid';

// –ò–º–ø–æ—Ä—Ç –≤–µ–±-–ø–∞—Ä—Å–µ—Ä–∞
import webParser from '../webParser.js';

const router = express.Router();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è io –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const getIO = () => {
  if (global.socketIO) {
    return global.socketIO;
  }
  return {
    emit: () => {},
    to: () => ({ emit: () => {} })
  };
};

// === –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ì–û–õ–û–°–û–í–ê–ù–ò–Ø ===

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
router.get('/current', (req, res) => {
  try {
    const state = memoryStorage.getCurrentState();
    const voteStats = memoryStorage.getVoteStats();
    
    res.json({
      success: true,
      fight: state.fight,
      votes: voteStats,
      isActive: state.isActive,
      lastUpdate: state.lastUpdate
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—è
router.get('/stats/:fightId?', (req, res) => {
  try {
    const currentState = memoryStorage.getCurrentState();
    const { fightId } = req.params;
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –±–æ—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω —Ç–µ–∫—É—â–∏–π
    if (fightId && currentState.fight?.id !== fightId) {
      return res.status(404).json({ 
        error: '–ë–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' 
      });
    }
    
    const voteStats = memoryStorage.getVoteStats();
    
    res.json({
      success: true,
      fight_id: currentState.fight?.id || null,
      ...voteStats
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å
router.post('/', async (req, res) => {
  try {
    const { fighter_choice, user_session } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!fighter_choice || !user_session) {
      return res.status(400).json({ 
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: fighter_choice, user_session' 
      });
    }

    if (![1, 2].includes(fighter_choice)) {
      return res.status(400).json({ 
        error: 'fighter_choice –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏–ª–∏ 2' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å (–¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞)
    const ip_address = req.ip || 
                      req.connection.remoteAddress || 
                      req.socket.remoteAddress ||
                      '127.0.0.1';

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ memory storage
    const result = memoryStorage.addVote(user_session, fighter_choice, ip_address);
    const voteStats = memoryStorage.getVoteStats();
    const currentState = memoryStorage.getCurrentState();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    getIO().emit('vote_added', {
      fight_id: currentState.fight?.id,
      results: voteStats,
      fight: currentState.fight
    });
    
    res.status(201).json({
      success: true,
      vote: {
        fighter_choice,
        user_session
      },
      results: voteStats
    });

  } catch (error) {
    if (error.message === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –≤ —ç—Ç–æ–º –±–æ—é') {
      return res.status(409).json({ error: error.message });
    }
    
    if (error.message === '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è') {
      return res.status(400).json({ error: error.message });
    }
    
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
router.post('/check', (req, res) => {
  try {
    const { user_session } = req.body;
    
    if (!user_session) {
      return res.status(400).json({ 
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: user_session' 
      });
    }

    const result = memoryStorage.checkUserVoted(user_session);
    const currentState = memoryStorage.getCurrentState();
    
    res.json({ 
      success: true,
      fight_id: currentState.fight?.id || null,
      hasVoted: result.hasVoted,
      fighterChoice: result.fighterChoice
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// === –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø ===

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–æ–µ–≤
router.get('/history', (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 10;
    const history = memoryStorage.getFightHistory(limit);
    
    res.json({
      success: true,
      fights: history,
      total: history.length
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
router.get('/server-stats', (req, res) => {
  try {
    const stats = memoryStorage.getServerStats();
    const currentState = memoryStorage.getCurrentState();
    
    res.json({
      success: true,
      server: stats,
      game: {
        currentFight: currentState.fight?.fighter1_name && currentState.fight?.fighter2_name ? 
          `${currentState.fight.fighter1_name} vs ${currentState.fight.fighter2_name}` : 
          '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è',
        isActive: currentState.isActive,
        totalVotes: currentState.votes.total,
        activeUsers: currentState.totalUsers
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.post('/end-fight', (req, res) => {
  try {
    const result = memoryStorage.endCurrentFight();
    
    if (result) {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–æ—è
      getIO().emit('fight_ended', {
        message: '–¢–µ–∫—É—â–∏–π –±–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
        finalStats: memoryStorage.getVoteStats()
      });
      
      res.json({
        success: true,
        message: '–ë–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω'
      });
    } else {
      res.status(400).json({
        error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è'
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≥–æ–ª–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) 
router.post('/reset', (req, res) => {
  try {
    const currentState = memoryStorage.getCurrentState();
    
    if (currentState.fight) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–º
      memoryStorage.gameState.votes = { fighter1: 0, fighter2: 0, total: 0 };
      memoryStorage.gameState.userSessions.clear();
      memoryStorage.gameState.lastUpdate = new Date().toISOString();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
      getIO().emit('votes_reset', {
        fight_id: currentState.fight.id,
        message: '–ì–æ–ª–æ—Å–∞ —Å–±—Ä–æ—à–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
        results: memoryStorage.getVoteStats()
      });
      
      res.json({
        success: true,
        message: '–ì–æ–ª–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã'
      });
    } else {
      res.status(400).json({
        error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è'
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –≥–æ–ª–æ—Å–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// Backup —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
router.post('/backup', async (req, res) => {
  try {
    await memoryStorage.backupToFile();
    res.json({
      success: true,
      message: 'Backup —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup' });
  }
});

// === ADMIN ENDPOINTS ===

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–Ω–µ—à–Ω–µ–≥–æ API
router.get('/admin/external-status', (req, res) => {
  try {
    const externalAPI = global.externalAPI;
    
    if (!externalAPI) {
      return res.status(503).json({
        error: 'External API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
      });
    }

    const stats = externalAPI.getStatus();
    
    res.json({
      success: true,
      lastCheck: stats.lastCheck,
      nextCheck: stats.nextCheck,
      isHealthy: stats.isHealthy,
      totalChecks: stats.totalChecks
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ External API:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ API
router.post('/admin/force-check', async (req, res) => {
  try {
    const externalAPI = global.externalAPI;
    
    if (!externalAPI) {
      return res.status(503).json({
        error: 'External API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
      });
    }

    console.log('üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ External API...');
    const result = await externalAPI.checkForNewFights();
    
    res.json({
      success: true,
      message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      result: {
        found: result ? '–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –±–æ–π' : '–ù–æ–≤—ã—Ö –±–æ–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ External API',
      details: error.message 
    });
  }
});

// === PARSER ENDPOINTS ===

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞
router.get('/admin/parser-config', (req, res) => {
  try {
    const config = webParser.getConfig();
    const status = webParser.getStatus();
    
    res.json({
      success: true,
      config: config,
      status: status
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞
router.post('/admin/parser-config', async (req, res) => {
  try {
    const config = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const validation = webParser.validateConfig(config);
    if (!validation.isValid) {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞',
        details: validation.errors
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    await webParser.setConfig(config);
    
    console.log(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${config.name}`);
    
    res.json({
      success: true,
      message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞',
      config: config
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
router.post('/admin/parser-test', async (req, res) => {
  try {
    const testConfig = req.body;
    
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞: ${testConfig.name}`);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const validation = webParser.validateConfig(testConfig);
    if (!validation.isValid) {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞',
        details: validation.errors
      });
    }
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
    const result = await webParser.testParser(testConfig);
    
    res.json({
      success: true,
      message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
      result: result
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞',
      details: error.message 
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞
router.get('/admin/parser-status', (req, res) => {
  try {
    const status = webParser.getStatus();
    
    res.json({
      success: true,
      status: status
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
router.post('/admin/parser-run', async (req, res) => {
  try {
    const status = webParser.getStatus();
    
    if (!status.isConfigured) {
      return res.status(400).json({
        error: '–ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    }
    
    console.log('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...');
    
    const result = await webParser.parsePage();
    
    res.json({
      success: true,
      message: '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω',
      data: result
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
      details: error.message 
    });
  }
});

// === API –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–• ===

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
router.get('/admin/api-sources', (req, res) => {
  try {
    const externalAPI = global.externalAPI;
    
    if (!externalAPI) {
      return res.status(503).json({
        error: 'External API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
      });
    }

    const sources = externalAPI.getAvailableSources();
    
    res.json({
      success: true,
      sources: sources,
      currentInterval: '7 –º–∏–Ω—É—Ç'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
router.post('/admin/switch-source', (req, res) => {
  try {
    const { sourceIndex } = req.body;
    const externalAPI = global.externalAPI;
    
    if (!externalAPI) {
      return res.status(503).json({
        error: 'External API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
      });
    }

    if (typeof sourceIndex !== 'number' || sourceIndex < 0) {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö'
      });
    }

    const success = externalAPI.switchSource(sourceIndex);
    
    if (success) {
      const sources = externalAPI.getAvailableSources();
      const currentSource = sources.find(s => s.isActive);
      
      console.log(`üîÑ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: ${currentSource.name}`);
      
      res.json({
        success: true,
        message: `–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: ${currentSource.name}`,
        currentSource: currentSource
      });
    } else {
      res.status(400).json({
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö'
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞',
      details: error.message 
    });
  }
});

export default router; 