// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π UFC —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import path from 'path';
import { fileURLToPath } from 'url';

// –ù–∞—à–∏ –º–æ–¥—É–ª–∏
import { memoryStorage } from './memoryStorage.js';
import { externalAPI } from './externalAPI.js';
import memoryVotesRouter from './routes/memoryVotes.js';
import { config, getCorsOrigins } from '../config.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const server = createServer(app);

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const io = new Server(server, {
  cors: {
    origin: getCorsOrigins(),
    methods: ['GET', 'POST'],
    credentials: true
  },
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  transports: config.socket.transports,
  pingTimeout: config.socket.pingTimeout,
  pingInterval: config.socket.pingInterval
});

// Middleware
app.use(helmet());
app.use(compression());

app.use(cors({
  origin: getCorsOrigins(),
  credentials: true
}));

app.use(express.json({ limit: '10mb' }));

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Socket.io –∏ externalAPI
global.socketIO = io;
global.externalAPI = externalAPI;

// === API ROUTES ===

// Memory-based routes
app.use('/api/memory', memoryVotesRouter);

// Healthcheck endpoint
app.get('/api/health', (req, res) => {
  const serverStats = memoryStorage.getServerStats();
  const currentState = memoryStorage.getCurrentState();
  const apiStatus = externalAPI.getStatus();
  
  res.json({
    status: 'healthy',
    uptime: serverStats.uptime,
    memory: serverStats.memory,
    currentFight: currentState.fight ? 
      `${currentState.fight.fighter1_name} vs ${currentState.fight.fighter2_name}` : 
      '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è',
    totalVotes: currentState.votes.total,
    activeConnections: serverStats.activeConnections,
    externalAPI: apiStatus,
    timestamp: new Date().toISOString()
  });
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API
app.get('/api/stats', (req, res) => {
  const serverStats = memoryStorage.getServerStats();
  const currentState = memoryStorage.getCurrentState();
  const voteStats = memoryStorage.getVoteStats();
  
  res.json({
    server: serverStats,
    game: currentState,
    votes: voteStats,
    history: memoryStorage.getFightHistory(5)
  });
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ memoryVotes.js

// === SOCKET.IO SETUP ===

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
let connectionCount = 0;
const MAX_CONNECTIONS = config.socket.maxConnections;

io.on('connection', (socket) => {
  connectionCount++;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  if (connectionCount > MAX_CONNECTIONS) {
    console.log(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${connectionCount}/${MAX_CONNECTIONS}`);
    socket.emit('error', { 
      message: '–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
    });
    socket.disconnect();
    connectionCount--;
    return;
  }

  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id} (–≤—Å–µ–≥–æ: ${connectionCount})`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  const currentState = memoryStorage.getCurrentState();
  const voteStats = memoryStorage.getVoteStats();
  
  socket.emit('current_state', {
    fight: currentState.fight,
    votes: {
      fighter1: voteStats.fighter1_votes,
      fighter2: voteStats.fighter2_votes,
      total: voteStats.total_votes
    },
    isActive: currentState.isActive,
    lastUpdate: currentState.lastUpdate
  });

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—è
  socket.on('subscribe_to_fight', (fightId) => {
    const currentState = memoryStorage.getCurrentState();
    
    if (currentState.fight && currentState.fight.id === fightId) {
      socket.join(`fight_${fightId}`);
      console.log(`üì∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –±–æ–π ${fightId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      socket.emit('fight_data', currentState.fight);
      const voteStats = memoryStorage.getVoteStats();
      socket.emit('vote_results', {
        fight_id: fightId,
        results: {
          fighter1: voteStats.fighter1_votes,
          fighter2: voteStats.fighter2_votes,
          total: voteStats.total_votes
        }
      });
    } else {
      socket.emit('error', { message: '–ë–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' });
    }
  });

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—è
  socket.on('unsubscribe_from_fight', (fightId) => {
    socket.leave(`fight_${fightId}`);
    console.log(`üì∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –±–æ—è ${fightId}`);
  });

  // –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
  socket.on('subscribe_admin', () => {
    socket.join('admin');
    console.log(`üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${socket.id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    socket.emit('admin_stats', {
      server: memoryStorage.getServerStats(),
      game: memoryStorage.getCurrentState(),
      history: memoryStorage.getFightHistory(),
      connections: connectionCount,
      externalAPI: externalAPI.getStatus()
    });
  });

  socket.on('unsubscribe_admin', () => {
    socket.leave('admin');
    console.log(`üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${socket.id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  socket.on('vote', async (data) => {
    try {
      const { fight_id, fighter_choice, user_session } = data;
      
      console.log(`üó≥Ô∏è –ì–æ–ª–æ—Å –æ—Ç ${socket.id}: –±–æ–π ${fight_id}, –±–æ–µ—Ü ${fighter_choice}`);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!fighter_choice || !user_session) {
        socket.emit('error', { message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞' });
        return;
      }

      if (![1, 2].includes(fighter_choice)) {
        socket.emit('error', { message: 'fighter_choice –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏–ª–∏ 2' });
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å
      const ip_address = socket.handshake.address || '127.0.0.1';

      // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ memory storage
      const result = memoryStorage.addVote(user_session, fighter_choice, ip_address);
      const voteStats = memoryStorage.getVoteStats();
      const currentState = memoryStorage.getCurrentState();
      
      console.log(`‚úÖ –ì–æ–ª–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: ${currentState.fight?.fighter1_name} vs ${currentState.fight?.fighter2_name} (–≤—Å–µ–≥–æ: ${voteStats.total_votes})`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
      io.emit('vote_added', {
        fight_id: currentState.fight?.id,
        results: {
          fighter1: voteStats.fighter1_votes,
          fighter2: voteStats.fighter2_votes,
          total: voteStats.total_votes
        },
        fight: currentState.fight
      });
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≥–æ–ª–æ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
      socket.emit('vote_confirmed', {
        success: true,
        fighter_choice,
        results: {
          fighter1: voteStats.fighter1_votes,
          fighter2: voteStats.fighter2_votes,
          total: voteStats.total_votes
        }
      });
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞ –æ—Ç ${socket.id}:`, error);
      
      if (error.message === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –≤ —ç—Ç–æ–º –±–æ—é') {
        socket.emit('error', { message: '–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –±–æ—é' });
      } else if (error.message === '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è') {
        socket.emit('error', { message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è' });
      } else {
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞' });
      }
    }
  });

  // –ü–∏–Ω–≥-–ø–æ–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  socket.on('ping', () => {
    socket.emit('pong');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', (reason) => {
    connectionCount--;
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}, –ø—Ä–∏—á–∏–Ω–∞: ${reason} (–æ—Å—Ç–∞–ª–æ—Å—å: ${connectionCount})`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  socket.on('error', (error) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞ ${socket.id}:`, error);
  });
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è broadcast –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è CPU)
io.broadcastVoteUpdate = (() => {
  let lastBroadcast = 0;
  const THROTTLE_MS = 100; // –º–∞–∫—Å–∏–º—É–º 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—Å–µ–∫
  
  return (data) => {
    const now = Date.now();
    
    // Throttling –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è CPU –Ω–∞–≥—Ä—É–∑–∫–∏
    if (now - lastBroadcast < THROTTLE_MS) {
      return;
    }
    lastBroadcast = now;
    
    const { fight_id, results } = data;
    console.log(`üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –±–æ—è ${fight_id} (${connectionCount} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π)`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –≤—Å–µ–º (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
    io.emit('vote_update', data);
    
    // –ê–¥–º–∏–Ω–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    io.to('admin').emit('admin_vote_update', {
      ...data,
      connectionCount,
      timestamp: now
    });
  };
})();

io.broadcastNewFight = (fight) => {
  console.log(`üî• –ù–æ–≤—ã–π –±–æ–π –Ω–∞—á–∞–ª—Å—è: ${fight.fighter1_name} vs ${fight.fighter2_name}`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
  const voteStats = memoryStorage.getVoteStats();
  io.emit('new_fight_started', {
    fight,
    votes: {
      fighter1: voteStats.fighter1_votes,
      fighter2: voteStats.fighter2_votes,
      total: voteStats.total_votes
    },
    message: `–ù–æ–≤—ã–π –±–æ–π: ${fight.fighter1_name} vs ${fight.fighter2_name}!`
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
  io.to('admin').emit('new_fight_started', { fight });
};

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∞–º
setInterval(() => {
  const adminRoom = io.sockets.adapter.rooms.get('admin');
  if (adminRoom && adminRoom.size > 0) {
    io.to('admin').emit('connection_stats', {
      total: connectionCount,
      admin: adminRoom.size,
      regular: connectionCount - adminRoom.size,
      memory: process.memoryUsage(),
      uptime: process.uptime()
    });
  }
}, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö ===

const PORT = config.port;

async function startServer() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ UFC —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ –ë–î...');
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ backup (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const restored = await memoryStorage.restoreFromFile();
    if (restored) {
      console.log('üì• –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ backup');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–Ω–µ—à–Ω–µ–≥–æ API
    externalAPI.startMonitoring();
    console.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–Ω–µ—à–Ω–µ–≥–æ API –∑–∞–ø—É—â–µ–Ω');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
    server.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT} (–≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)`);
      console.log(`üì° Socket.io –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º (–º–∞–∫—Å: ${MAX_CONNECTIONS})`);
      console.log(`üíæ In-memory storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
      console.log(`üîÑ Backup –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç`);
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –±–æ–µ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç`);
      console.log(`üåê –î–æ—Å—Ç—É–ø –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: http://localhost:${PORT}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await memoryStorage.backupToFile();
    console.log('üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ backup');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server.close(() => {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:', error);
    process.exit(1);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ unhandled errors
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  // –ù–µ –≤—ã—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  memoryStorage.backupToFile().finally(() => {
    process.exit(1);
  });
});

process.on('unhandledRejection', (error) => {
  console.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ promise:', error);
});

startServer(); 